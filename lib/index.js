const fs = require('fs')
const path = require('path')
const zlib = require('zlib')
const { spawn } = require('child_process')

/**
 * Start profiling a Node.js process using the preload script
 * @param {string} script - Path to the script to profile
 * @param {string[]} args - Arguments to pass to the script
 * @param {object} options - Options for profiling
 * @returns {Promise<object>} Process information
 */
function startProfiling (script, args = [], options = {}) {
  const preloadPath = path.join(__dirname, '..', 'preload.js')

  const env = {
    ...process.env,
    ...options.env
  }

  const child = spawn('node', ['-r', preloadPath, script, ...args], {
    stdio: 'inherit',
    env,
    ...options
  })

  return {
    pid: child.pid,
    process: child,
    toggleProfiler: () => {
      process.kill(child.pid, 'SIGUSR2')
    }
  }
}

/**
 * Parse a pprof profile file
 * @param {string} filePath - Path to the pprof file
 * @returns {Promise<object>} Parsed profile data
 */
async function parseProfile (filePath) {
  if (!fs.existsSync(filePath)) {
    throw new Error(`Profile file not found: ${filePath}`)
  }

  let data = fs.readFileSync(filePath)

  // Check if the file is gzipped
  const isGzipped = data[0] === 0x1f && data[1] === 0x8b
  if (isGzipped) {
    data = zlib.gunzipSync(data)
  }

  const { Profile } = await import('pprof-format')
  return Profile.decode(data)
}

/**
 * Generate an HTML flamegraph from a pprof file using the CLI approach
 * @param {string} pprofPath - Path to the pprof file
 * @param {string} outputPath - Path to write the HTML file
 * @returns {Promise<void>}
 */
async function generateFlamegraph (pprofPath, outputPath) {
  // Generate a simple HTML file with instructions for now
  // In the future, this will integrate with @platformatic/react-pprof when it's published

  const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸ”¥ Flame Profile</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            line-height: 1.6;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        h1 { text-align: center; margin-bottom: 30px; }
        .flame { font-size: 2em; }
        .info { background: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 8px; margin: 20px 0; }
        .command { 
            background: rgba(0, 0, 0, 0.3); 
            padding: 10px; 
            border-radius: 6px; 
            font-family: monospace; 
            margin: 10px 0;
            word-break: break-all;
        }
        a { color: #fff; text-decoration: underline; }
    </style>
</head>
<body>
    <div class="container">
        <h1><span class="flame">ðŸ”¥</span> CPU Profile Generated</h1>
        
        <div class="info">
            <strong>Profile:</strong> ${path.basename(pprofPath)}<br>
            <strong>Size:</strong> ${fs.statSync(pprofPath).size} bytes<br>
            <strong>Generated:</strong> ${new Date().toLocaleString()}
        </div>

        <h2>ðŸŽ¯ What's Next?</h2>
        <p>Your CPU profile has been successfully captured! Here are your options for visualization:</p>

        <h3>Option 1: Use pprof tool (Recommended)</h3>
        <div class="command">go tool pprof -http=:8080 ${pprofPath}</div>
        <p>This will start a web interface at <a href="http://localhost:8080">http://localhost:8080</a></p>

        <h3>Option 2: Use speedscope</h3>
        <div class="command">npx speedscope ${pprofPath}</div>
        <p>Speedscope is a fast, web-based viewer for performance profiles.</p>

        <h3>Option 3: Command line analysis</h3>
        <div class="command">go tool pprof ${pprofPath}</div>
        <p>Interactive command-line interface for profile analysis.</p>

        <h2>ðŸ“Š Profile Information</h2>
        <p>This profile was generated using <code>@datadog/pprof</code> and contains CPU sampling data from your Node.js application.</p>
        
        <p><strong>File location:</strong> <code>${pprofPath}</code></p>
        
        <hr style="margin: 30px 0; border: 1px solid rgba(255,255,255,0.2);">
        <p style="text-align: center; font-size: 0.9em; opacity: 0.8;">
            Generated by <strong>@platformatic/flame</strong> ðŸ”¥<br>
            <a href="https://github.com/platformatic/flame">github.com/platformatic/flame</a>
        </p>
    </div>
</body>
</html>`

  fs.writeFileSync(outputPath, html)
  return { stdout: `Generated HTML report: ${outputPath}`, stderr: '' }
}

module.exports = {
  startProfiling,
  parseProfile,
  generateFlamegraph
}
